{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "237e707f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import joblib\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Load the model\n",
    "model_path = \"C:/Users/admin/Documents/Project_ADS/best_model1.pkl\"\n",
    "loaded_model = joblib.load(model_path)\n",
    "\n",
    "# Streamlit App\n",
    "st.title(\"Linear Regression Model Explorer\")\n",
    "\n",
    "# Upload CSV data through Streamlit\n",
    "uploaded_file = st.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n",
    "if uploaded_file is not None:\n",
    "    df = pd.read_csv(uploaded_file)\n",
    "\n",
    "    # Display the first few rows of the DataFrame\n",
    "    st.subheader(\"Dataset Preview\")\n",
    "    st.write(df.head())\n",
    "\n",
    "    # Summary statistics and missing values\n",
    "    st.subheader(\"Dataset Summary\")\n",
    "    st.write(df.describe())\n",
    "    st.write(\"Missing Values:\")\n",
    "    st.write(df.isnull().sum())\n",
    "\n",
    "    # One-hot encoding\n",
    "    st.subheader(\"One-Hot Encoded DataFrame\")\n",
    "    df_encoded = pd.get_dummies(df, columns=['marital', 'ed', 'jobsat', 'gender'], drop_first=True)\n",
    "    st.write(df_encoded.head())\n",
    "\n",
    "    # Standardization\n",
    "    st.subheader(\"Standardized DataFrame\")\n",
    "    numeric_columns = ['age', 'inccat', 'car', 'carcat', 'employ']\n",
    "    scaler = StandardScaler()\n",
    "    df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n",
    "    st.write(df[numeric_columns].head())\n",
    "\n",
    "    # Prediction using the linear regression model\n",
    "    st.subheader(\"Linear Regression Model Prediction\")\n",
    "\n",
    "    # Select features for prediction\n",
    "    features = st.multiselect(\"Select features for prediction\", numeric_columns)\n",
    "\n",
    "    if st.button(\"Predict\"):\n",
    "        X_pred = df[features]\n",
    "        predictions = loaded_model.predict(X_pred)\n",
    "        df[\"Predicted Income\"] = predictions\n",
    "        st.write(df[[\"income\", \"Predicted Income\"]])\n",
    "\n",
    "    # Model coefficients\n",
    "    st.subheader(\"Model Coefficients\")\n",
    "    st.write(\"Coefficients:\", loaded_model.coef_)\n",
    "    st.write(\"Intercept:\", loaded_model.intercept_)\n",
    "\n",
    "    # Evaluation metrics\n",
    "    st.subheader(\"Model Evaluation Metrics\")\n",
    "    y_test = df[\"income\"]  # Replace with your actual target variable\n",
    "    y_pred = loaded_model.predict(df[numeric_columns])\n",
    "    st.write(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred))\n",
    "    st.write(\"R-squared:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5922352",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
